이 페이지는 QLY의 메인 페이지입니다.
사용자의 로그인 유형에 따라 상단 메뉴 구성이 달라집니다.
예를 들어,

관리자로 로그인하면 관리자용 메뉴가 보이고

해결사나 의뢰인으로 로그인하면 그에 맞는 마이페이지 링크가 다르게 나옵니다."

"이 분기는 세션에서 로그인한 사용자 정보를 가져와
JSP에서  츄스웬 조건문으로 동적으로 구성했습니다."
"또한, 상단 네비게이션 메뉴는
마우스를 클릭하면 하위 메뉴가 슬라이드로 펼쳐지는 방식을 적용했습니다.
이는 CSS hover 효과나 드롭다운 토글 방식을 사용해 구현했습니다
ㄴ메인페이지

다음은 저희의 메인기능 중 하나인 퀘스트 등록입니다
화면을 보시면 전체 폼이 하나의 퀘스트를 등록할 수 있도록 구성이 되어 있고 중앙을 보시면 사용자가 의뢰 리스트를 추가할 수 있도록 구성이 되이있습니다
그래서 퀘스트를 등록시 퀘스트 아이디라는 고유의 pk가 생성이 되고 이 pk를 참조하는 방식으로 의뢰리스트 들이 자동으로 연결이 됩니다
즉 퀘스트가 상위 엔티티가 되고 의뢰리스트는 이를 참조하는 하위엔티티가 됩니다 그래서 db에서는 이 참조를 이용해 자연스런 데이터 연동을 할수 있도록 구현을 했습니다.
ㄴ퀘스트 등록 의뢰리스트

다음은 주소 저장 방식입니다 
저희는 주소저장을 카카오 주소 검색api를 사용했습니다.
아래를 보시면 주소를 입력하는 칸이 있는데 사용자가 주소를 입력해 json형식으로 데이트를 카카오api에 전송을하면 카카오에서 그 주소에 대응되는 위도와 경도를 응답으로 보내줍니다.
받은 위도와 경도는 직접 db에 저장되도록 설계했고 이후 지도 연동이나 위치기반기능에 활용할 예정에 두었습니다.
ㄴ퀘스트 등록 주소 저장

우측 기능은 이미지 업로드 기능입니다.
사용자가 사진 파일을 업로드하면, 우선 MultipartFile 객체로 임시 저장된 파일을 받고,이를  클라우디너리(Cloudinary) 서버로 업로드합니다.
클라우디너리에 업로드가 완료되면, 해당 이미지의 URL을 반환받고,
이 URL을 DB에 저장하여 나중에 화면에 출력할 때 활용할 수 있도록 구현했습니다
ㄴ 퀘스트 등록 이미지 업로드


오른쪽은 각각의 기능을 처리하는 컨트롤러 메서드를 보여주고 있습니다
컨트롤러 요청을 통해 특정 퀘스트의 상세 정보를 조회합니다.
URL에서 questId를 받아와서 해당 퀘스트 정보를 화면에 출력합니다.
사용자가 신청 폼을 작성하고 신청 버튼을 누르면 컨트롤러로 요청이 전달됩니다.
questId와 신청 시간 time을 파라미터로 받아서, 현재 로그인한 사용자 정보와 함께 신청 데이터를 저장합니다.
ㄴ퀘스트 신청


"이번 화면은 퀘스트 전체보기 기능입니다."
"사용자가 전체 퀘스트를 한눈에 볼 수 있도록,
카드 형태로 퀘스트 목록을 나열하고 있고, 각 퀘스트에는 제목, 신청자 수, 등록일 등이 표시됩니다."
"첫 번째는 신청자 수 계산입니다.
서브쿼리를 활용해 QUEST_APPLICATION 테이블에서
각 퀘스트에 대한 신청자 수를 실시간으로 카운트하여 화면에 보여주고 있습니다.
"두 번째는 키워드 검색 기능입니다.
사용자가 상단 검색창에 단어를 입력하면, 퀘스트 목록 중 해당 키워드가 포함된 카드만 화면에 남기고 나머지는 자동으로 숨겨줍니다."
"이 부분은 서버에 다시 요청을 보내는 방식이 아니라,
JavaScript를 이용해 브라우저에서 바로 필터링하는 구조로 구현되었습니다
ㄴ 퀘스트 전체보기

"이 화면은 의뢰인이 퀘스트를 진행하면서 현재 상태를 확인할 수 있는 ‘퀘스트 진행상태’ 화면입니다."
"이 기능은 크게 두 가지 핵심 로직으로 구성되어 있습니다."
"사용자가 의뢰 리스트를 체크하면,
해당 체크 상태를 서버에 즉시 반영하기 위해 AJAX 요청을 보냅니다.
비동기 방식으로 처리되기 때문에 페이지 새로고침 없이도 바로 반영됩니다."
"각 퀘스트의 전체 리스트	 중에서 체크된 항목 수를 기준으로
진행률을 계산하고, 이를 진행률 바와 텍스트로 시각화합니다."
지도같은 경우는 퀘스트 등록할때 변환한 위도경도를 카카오api를 통해 마커를 찍었습니다
"이 기능을 통해 의뢰인은 퀘스트의 진행 상태를 실시간으로 관리하고,
체크리스트 기반으로 업무를 체계적으로 수행할 수 있게 됩니다."
ㄴ 마이페이지 의뢰인 퀘스트 진행상태

"이 화면은 해결사가 퀘스트를 수행하면서 현재 진행 상황을 확인하고,
모든 항목이 완료되면 보상을 받을 수 있도록 구성된 퀘스트 진행 화면입니다."
"위쪽 이미지는 퀘스트 진행 중인 상태를 보여주고,
아래 이미지는 모든 할 일이 완료된 상태를 보여줍니다.
각 항목을 체크하면 진행률이 실시간으로 반영되며,
하단에는 보상 정보와 함께 보상받기 버튼이 조건에 따라 활성화되도록 구현했습니다."
하단의 '보상받기 버튼은 두 가지 조건을 모두 만족해야 활성화됩니다."
퀘스트의 상태가 **'완료'**일 것
보상을 아직 지급받지 않은 상태일 것
"이 두 조건이 모두 충족되면 버튼이 활성화되고,
그 외에는 비활성화 상태로 표시됩니다."

ㄴ마이페이지 해결사 퀘스트 진행상태

"다음은 결제 페이지입니다.
저희는 결제 기능을 구현하기 위해 **포트원(PortOne)**에서 제공하는 아임포트(iamport) 결제 API를 사용했습니다.
먼저 상단에 보이는 것처럼, 사용자가 충전할 코인 수량을 입력하면,
Kakao Pay 결제 창이 팝업되고 사용자는 QR코드를 스캔하거나 바로 결제를 진행할 수 있습니다."
"오른쪽 코드 부분은 실제 결제를 처리하는 JavaScript 로직입니다.
먼저, 외부 라이브러리를 import한 뒤,
결제 메서드를 통해 결제를 요청하고,
사용자 정보와 주문 정보가 함께 전달됩니다.
결제가 성공하면, submit() 메서드를 통해 충전 처리 폼이 서버로 전송되고,
실패할 경우에는 에러 메시지를 사용자에게 알려주도록 구성되어 있습니다.
ㄴ카카오페이 결제 기능

"코인 결제 페이지에서는 AOP(관점 지향 프로그래밍) 기술을 사용해
결제 완료 시점을 자동으로 감지하고, 코인 증가 내역을 로그로 기록합니다.

코인증감 함수가 실행되면,
AOP가 이를 가로채서 코인히스토리 라는 메서드를 자동 실행시킵니다.

이 메서드에서는 사용자 ID, 충전 코인 수량, 잔액 등을 가져와
결제 로그 테이블에 저장하는 작업을 수행합니다.

즉, 서비스 로직과 별개로 로그 기록이 자동으로 처리되도록 구현한 구조입니다."
ㄴ aop 

"다음은 관리자 페이지의 문의 사항 관리 기능입니다.
사용자가 문의를 등록하면, 해당 문의는 '미답변' 상태로 관리자 페이지에 표시됩니다.

관리자는 모달 창을 통해 직접 답변을 입력할 수 있고,
답변을 등록하면 상태가 자동으로 **'답변 완료'**로 변경됩니다.

이 기능은 관리자 답변 컬럼이 NULL인지 여부를 기준으로 구현되어 있습니다.
즉, 답변 내용이 없을 경우에는 '미답변',
내용이 입력되면 '답변 완료'로 상태가 자동 분기되도록 처리했습니다."
ㄴ관리자페이지 문의 사항

