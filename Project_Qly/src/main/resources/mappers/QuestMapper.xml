<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.qly.mapper.QuestMapper">

	<resultMap id="QuestResultMap" type="com.qly.dto.QuestDto">
		<id property="questId" column="QUEST_ID" />
		<result property="userId" column="USER_ID" />
		<result property="title" column="TITLE" />
		<result property="category" column="CATEGORY" />
		<result property="content" column="CONTENT" />
		<result property="photoPath" column="PHOTO_PATH" />
		<result property="regDate" column="REG_DATE" />
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="status" column="STATUS" />
		<result property="progress" column="PROGRESS" />
		<result property="address" column="ADDRESS" />
		<result property="rewardTokens" column="REWARD_TOKENS" />
		<result property="latitude" column="LATITUDE" />
		<result property="longitude" column="LONGITUDE" />
		<result property="location" column="LOCATION" />
		<result property="createdAt" column="CREATED_AT" />
		<result property="viewCount" column="VIEW_COUNT" />
	</resultMap>

	<!-- <select id="getAllQuests" resultType="com.qly.dto.QuestDto"> SELECT 
		QUEST_ID, TITLE, CATEGORY, PHOTO_PATH, STATUS, REG_DATE, (SELECT COUNT(*) 
		FROM QUEST_APPLICATION qa WHERE qa.QUEST_ID = q.QUEST_ID) AS applicantCount 
		FROM QUESTS q ORDER BY CREATED_AT DESC </select> -->

	<select id="getAllQuests" resultType="com.qly.dto.QuestDto">
		SELECT

		QUEST_ID AS questId,
		TITLE,
		CATEGORY,
		PHOTO_PATH AS photoPath,
		STATUS,
		REG_DATE AS
		regDate,
		(SELECT
		COUNT(*)
		FROM
		QUEST_APPLICATION qa
		WHERE qa.QUEST_ID =
		q.QUEST_ID)
		AS
		applicantCount
		FROM QUESTS q
		ORDER BY REG_DATE DESC
	</select>


	<update id="updateUserTokens">
		UPDATE USERS
		SET TOTAL_TOKENS = #{totalTokens}
		WHERE
		USER_ID = #{userId}
	</update>


	<insert id="insertQuest" parameterType="com.qly.dto.QuestDto">
		<selectKey keyProperty="questId" order="BEFORE"
			resultType="int">
			SELECT QUESTS_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO QUESTS (
		QUEST_ID, USER_ID, TITLE, CATEGORY, CONTENT,
		PHOTO_PATH, STATUS, PROGRESS,
		LATITUDE, LONGITUDE, ADDRESS, LOCATION,
		START_DATE, END_DATE,
		REWARD_TOKENS
		) VALUES (
		#{questId,
		jdbcType=NUMERIC},
		#{userId, jdbcType=NUMERIC},
		#{title,
		jdbcType=VARCHAR},
		#{category,
		jdbcType=VARCHAR},
		#{content,
		jdbcType=CLOB},
		#{photoPath,
		jdbcType=VARCHAR},
		'대기',
		#{progress,
		jdbcType=NUMERIC},
		#{latitude,
		jdbcType=NUMERIC},
		#{longitude,
		jdbcType=NUMERIC},
		#{address,
		jdbcType=VARCHAR},
		#{location,
		jdbcType=VARCHAR},
		#{startDate,
		jdbcType=DATE},
		#{endDate,
		jdbcType=DATE},
		#{rewardTokens,
		jdbcType=NUMERIC}
		)
	</insert>

	<insert id="insertQuestApplication"
		parameterType="com.qly.dto.QuestDto">
		INSERT INTO QUEST_APPLICATION (
		APPLICATION_ID,
		QUEST_ID,
		USER_ID,
		APPLIED_AT
		) VALUES (
		QUEST_APPLICATION_SEQ.NEXTVAL,
		#{questId},
		#{userId},
		#{appliedAt}
		)
	</insert>

	<select id="selectQuestById" parameterType="int"
		resultType="com.qly.dto.QuestDto">
		SELECT
		QUEST_ID AS questId,
		TITLE AS title,
		ADDRESS AS address,
		REWARD_TOKENS AS rewardTokens,
		PHOTO_PATH AS photoPath,
		START_DATE AS
		startDate,      <!-- 추가 -->
		END_DATE AS endDate
		FROM
		QUESTS
		WHERE QUEST_ID = #{questId}
	</select>

	<select id="userselectQuestById" parameterType="int"
		resultType="com.qly.dto.QuestDto">
		SELECT
		QUEST_ID AS questId,
		TITLE AS title,
		ADDRESS AS
		address,
		REWARD_TOKENS AS rewardTokens,
		PHOTO_PATH AS photoPath
		FROM
		QUESTS
		WHERE QUEST_ID = #{questId}
	</select>

	<select id="selectApplicantsByQuestId" parameterType="int"
		resultType="com.qly.dto.QuestDto">
		SELECT
		qa.APPLICATION_ID AS applicationId,
		qa.QUEST_ID AS
		questId,
		qa.USER_ID
		AS userId,
		u.USERNAME AS username,
		qa.APPLIED_AT AS
		appliedAt,
		q.ADDRESS
		AS address,
		q.LOCATION AS location
		FROM
		QUEST_APPLICATION qa
		JOIN QUESTS q ON qa.QUEST_ID = q.QUEST_ID
		JOIN
		USERS u ON qa.USER_ID = u.USER_ID
		WHERE qa.QUEST_ID = #{questId}
	</select>


	<update id="resetSolverFlag">
		UPDATE QUEST_APPLICATION
		SET IS_SOLVER = '0'
		WHERE
		QUEST_ID = #{questId}
	</update>

	<update id="setSolver">
		UPDATE QUEST_APPLICATION
		SET IS_SOLVER = '1'
		WHERE
		QUEST_ID = #{questId}
		AND USER_ID = #{userId}
	</update>

	<update id="updateQuestStatusToProgress">
		UPDATE QUESTS
		SET STATUS = '진행중',
		PROGRESS = 1
		WHERE
		QUEST_ID = #{questId}
	</update>


	<select id="getInProgressQuestsByUserId"
		resultType="com.qly.dto.QuestDto">
		SELECT *
		FROM QUESTS
		WHERE STATUS = '진행중' AND USER_ID =
		#{userId}
		ORDER BY REG_DATE DESC
	</select>



	<!-- <select id="userselectQuestById" parameterType="int" resultType="com.qly.dto.QuestDto"> 
		SELECT qa.APPLICATION_ID AS applicationId, qa.APPLIED_AT AS appliedAt, qa.STATUS 
		AS status, u.USERNAME, u.USER_ID AS userId FROM QUEST_APPLICATION qa JOIN 
		USERS u ON qa.USER_ID = u.USER_ID WHERE qa.QUEST_ID = #{questId} </select> -->


	<insert id="insertUser" parameterType="com.qly.dto.UserDto">
		INSERT INTO USERS (
		USER_ID, USERNAME, PASSWORD, PHONE, EMAIL, ADDRESS, USER_TYPE,
		TOTAL_TOKENS,
		JOIN_DATE
		) VALUES (
		USERS_SEQ.NEXTVAL,
		#{username,
		jdbcType=VARCHAR},
		#{password, jdbcType=VARCHAR},
		#{phone,
		jdbcType=VARCHAR},
		#{email, jdbcType=VARCHAR},
		#{address,
		jdbcType=VARCHAR},
		#{userType, jdbcType=VARCHAR},
		#{totalTokens,
		jdbcType=INTEGER},
		SYSDATE
		)
	</insert>

	<select id="getUserByUsername" parameterType="String"
		resultType="com.qly.dto.UserDto">
		SELECT
		USER_ID AS userId,
		USERNAME AS username,
		PASSWORD AS
		password,
		PHONE AS phone,
		EMAIL AS email,
		ADDRESS AS address,
		USER_TYPE AS
		userType,
		TOTAL_TOKENS AS totalTokens,
		JOIN_DATE AS joinDate
		FROM USERS
		WHERE USERNAME = #{username}
	</select>



	<select id="QuestTaskDto" resultType="com.qly.dto.QuestTaskDto">
		SELECT * FROM QUEST_TASK
		WHERE QUEST_ID = #{questId}
	</select>

	<select id="getQuestUserId" resultType="com.qly.dto.QuestDto">
		SELECT *
		FROM QUESTS
		WHERE
		USER_ID = #{userId}
		ORDER BY CREATED_AT DESC
	</select>




	<!-- <select id="getMyQuestList" resultType="com.qly.dto.QuestDto"> SELECT 
		QUEST_ID AS questId, USER_ID AS userId, TITLE, CATEGORY, CONTENT, PHOTO_PATH 
		as photoPath, PROGRESS, LATITUDE, LONGITUDE, ADDRESS, LOCATION, STATUS, REWARD_TOKENS 
		AS rewardTokens, REG_DATE AS regDate FROM QUESTS WHERE USER_ID = #{userId} 
		ORDER BY REG_DATE DESC </select> -->
	<select id="getMyQuestList" resultType="com.qly.dto.QuestDto"> SELECT
		q.QUEST_ID AS
		questId, q.USER_ID AS userId, q.TITLE, q.CATEGORY, q.CONTENT,
		q.PHOTO_PATH AS photoPath, q.PROGRESS, q.LATITUDE, q.LONGITUDE,
		q.ADDRESS,
		q.LOCATION, q.STATUS, q.REWARD_TOKENS AS rewardTokens,
		q.REG_DATE AS regDate,
		( SELECT COUNT(*) FROM QUEST_APPLICATION qa
		WHERE qa.QUEST_ID =
		q.QUEST_ID
		) AS applicantCount FROM QUESTS q WHERE
		q.USER_ID = #{userId} ORDER BY
		q.REG_DATE
		DESC
	</select>

	<select id="getMyProgressQuestList"
		resultType="com.qly.dto.QuestDto">
		SELECT
		q.QUEST_ID AS questId,
		q.USER_ID AS userId,
		q.TITLE,
		q.CATEGORY,
		q.CONTENT,
		q.PHOTO_PATH AS photoPath,
		q.PROGRESS,
		q.LATITUDE,
		q.LONGITUDE,
		q.ADDRESS,
		q.LOCATION,
		q.STATUS,
		q.REWARD_TOKENS AS
		rewardTokens,
		q.REG_DATE AS regDate,
		(
		SELECT COUNT(*)
		FROM
		QUEST_APPLICATION qa
		WHERE qa.QUEST_ID = q.QUEST_ID
		) AS applicantCount
		FROM QUESTS q
		WHERE q.USER_ID = #{userId}
		AND q.STATUS = '진행중'
		ORDER BY
		q.REG_DATE DESC
	</select>

	<select id="getCompletedQuestsByUserId"
		resultMap="QuestResultMap">
		SELECT *
		FROM QUESTS
		WHERE USER_ID = #{userId}
		AND STATUS =
		'완료'
		ORDER BY REG_DATE DESC
	</select>

	<select id="getCompletedQuestsBySolverId"
		resultMap="QuestResultMap">
		SELECT Q.*
		FROM QUESTS Q
		JOIN QUEST_APPLICATION QA ON
		Q.QUEST_ID = QA.QUEST_ID
		WHERE QA.USER_ID = #{solverId}
		AND Q.STATUS =
		'완료'
		AND QA.IS_SOLVER = 1
		AND QA.REWARD_GIVEN = 'Y'
		ORDER BY Q.REG_DATE
		DESC
	</select>




	<select id="getQuestTasks" resultType="com.qly.dto.QuestTaskDto">
		SELECT
		TASK_ID AS taskId,
		QUEST_ID AS questId,
		DESCRIPTION,
		IS_CHECKED AS isChecked
		FROM QUEST_TASK
		WHERE QUEST_ID = #{questId}
	</select>



	<update id="setCheckedTasks">
		UPDATE QUEST_TASK
		SET IS_CHECKED = '1'
		WHERE TASK_ID IN
		<foreach collection="taskIds" item="id" open="(" separator=","
			close=")">
			#{id}
		</foreach>
	</update>



	<!-- <update id="reduceTokensBy100" parameterType="int">
		UPDATE QUESTS
		SET
		REWARD_TOKENS = REWARD_TOKENS - 100
		WHERE QUEST_ID = #{questId}
	</update> -->


	<!-- 진행 상황 전용 퀘스트 태스크 조회 -->
	<select id="jongilJJangyoonjaeJJang"
		resultType="com.qly.dto.QuestTaskDto">
		SELECT
		TASK_ID AS taskId,
		QUEST_ID AS questId,
		DESCRIPTION,
		IS_CHECKED AS isChecked
		FROM QUEST_TASK
		WHERE QUEST_ID = #{questId}
	</select>


	<!-- <select id="getQuestsByApplicantUserId" parameterType="int" resultType="com.qly.dto.QuestDto"> 
		SELECT Q.QUEST_ID AS questId, Q.TITLE AS title, Q.PHOTO_PATH AS photoPath, 
		Q.ADDRESS AS address, Q.START_DATE AS startDate, Q.END_DATE AS endDate, Q.STATUS 
		AS status, Q.REWARD_TOKENS AS rewardTokens FROM QUESTS Q JOIN QUEST_APPLICATION 
		QA ON Q.QUEST_ID = QA.QUEST_ID WHERE QA.USER_ID = #{userId} AND QA.IS_SOLVER 
		= 1 </select> -->
<select id="getQuestsByApplicantUserId" parameterType="int"
		resultType="com.qly.dto.QuestDto">
	SELECT
		Q.QUEST_ID AS questId,
		Q.TITLE AS title,
		Q.PHOTO_PATH AS photoPath,
		Q.ADDRESS AS address,
		Q.START_DATE AS startDate,
		Q.END_DATE AS endDate,
		Q.STATUS AS status,
		Q.REWARD_TOKENS AS rewardTokens,  
		Q.LATITUDE AS latitude,
		Q.LONGITUDE AS longitude,
		Q.LOCATION AS location
	FROM QUESTS Q
	JOIN QUEST_APPLICATION QA ON Q.QUEST_ID = QA.QUEST_ID
	WHERE QA.USER_ID = #{solverId}
	  AND QA.IS_SOLVER = 1
	ORDER BY Q.REG_DATE DESC
</select>






	<update id="resetAllTaskChecks">
		UPDATE QUEST_TASK
		SET IS_CHECKED = '0'
		WHERE QUEST_ID =
		#{questId}
	</update>


	<!-- <select id="heagualList" parameterType="int" resultType="com.qly.dto.QuestDto"> 
		SELECT TITLE, CATEGORY, REG_DATE FROM QUESTS WHERE QUEST_ID IN ( SELECT QUEST_ID 
		FROM QUEST_APPLICATION WHERE USER_ID = #{userId} AND STATUS = '진행중' ) </select> -->

	<select id="heagualList" parameterType="int"
		resultType="com.qly.dto.QuestDto">
		SELECT TITLE, CATEGORY, REG_DATE
		FROM QUESTS
		WHERE QUEST_ID
		IN (
		SELECT QUEST_ID
		FROM QUEST_APPLICATION
		WHERE USER_ID = #{userId}
		AND
		STATUS = '진행중'
		AND IS_SOLVER = 1
		)
	</select>


	<update id="updateQuestStatus">
		UPDATE QUESTS
		SET STATUS = #{status}
		WHERE QUEST_ID =
		#{questId}
	</update>

	<!-- rewardTokens 조회 -->
	<select id="getRewardTokensByQuestId" resultType="int">
		SELECT
		reward_tokens FROM QUESTS WHERE quest_id = #{questId}
	</select>

	<update id="markRewardGiven">
		UPDATE QUEST_APPLICATION
		SET REWARD_GIVEN = 'Y'
		WHERE
		QUEST_ID = #{questId} AND USER_ID = #{userId}
	</update>

	<select id="isRewardGiven" resultType="int">
		SELECT COUNT(*) FROM
		QUEST_APPLICATION
		WHERE QUEST_ID = #{questId} AND USER_ID = #{userId}
		AND REWARD_GIVEN = 'Y'
	</select>

	<!-- 메인페이지 Mapper -->
	<select id="getLatest5Quests" resultType="com.qly.dto.QuestDto">
		SELECT *
		FROM (
		SELECT
		Q.QUEST_ID AS questId,
		Q.CREATED_AT AS createdAt,
		Q.CATEGORY AS category,
		Q.TITLE AS title,
		Q.REWARD_TOKENS AS
		rewardTokens,
		U.USERNAME AS username
		FROM
		QUESTS Q
		JOIN
		USERS U ON
		Q.USER_ID = U.USER_ID
		ORDER BY
		Q.CREATED_AT DESC
		)
		WHERE ROWNUM <![CDATA[ <= ]]>
		5
	</select>

	<select id="getRandom3Quests" resultType="com.qly.dto.QuestDto">
		SELECT *
		FROM (
		SELECT
		Q.QUEST_ID AS questId,
		Q.TITLE AS title,
		Q.CATEGORY
		AS category,
		Q.REWARD_TOKENS AS rewardTokens,
		Q.CREATED_AT AS createdAt,
		Q.STATUS AS status,
		U.USERNAME AS username
		FROM
		QUESTS Q
		JOIN
		USERS U ON
		Q.USER_ID = U.USER_ID
		WHERE
		Q.STATUS = '대기'
		ORDER BY
		DBMS_RANDOM.VALUE
		)
		WHERE ROWNUM <![CDATA[ <= ]]>
		3
	</select>

	<select id="searchCategories" parameterType="string"
		resultType="string">
		SELECT DISTINCT CATEGORY
		FROM QUESTS
		WHERE CATEGORY IS NOT
		NULL
		AND LOWER(CATEGORY) LIKE '%' || LOWER(#{keyword})
		|| '%'
	</select>
</mapper>
